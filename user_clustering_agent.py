# -*- coding: utf-8 -*-
"""user_clustering_agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kx4QnIK2wjNNCwMr_5nJc0vXgkQ0itBY
"""

# user_clustering_agent.py

import joblib
import numpy as np
import pandas as pd

# Path to the trained model package on Hugging Face
MODEL_PATH = "/Users/avssp/Desktop/zomato/ravi/final/user_clustering_model.pkl"

# Features in the order the model expects
FEATURE_NAMES = [
    "Age",
    "Monthly_Income",
    "Average_Rating",
    "Average_Z_Score",
    "purchase_sensitivity",
    "Gender",
    "weather",
    "Marital_Status",
    "C_Type",
    "Veg_Ratio"
]

# Default values for omitted features
DEFAULTS = {
    "Average_Rating": 4.0,
    "Average_Z_Score": 0.0,
    "purchase_sensitivity": 3.0,
    "C_Type": 6,       # typical mid-range cuisine code
    "Veg_Ratio": 0.5
}

class UserClusteringAgent:
    def __init__(self, model_path: str = MODEL_PATH):
        """
        Load the pre-trained clustering pipeline.
        """
        self.pipeline = joblib.load(model_path)["pipeline"]

    def predict_cluster(self,
                        Age: float,
                        Monthly_Income: float,
                        Gender: int,
                        weather: int,
                        Marital_Status: int) -> int:
        """
        Assigns a cluster for a new user.

        Parameters:
          Age (float): standardized age feature
          Monthly_Income (float): standardized income feature
          Gender (int): 0 or 1
          weather (int): 0=Cold, 1=Rain, 2=Hot
          Marital_Status (int): 0 (single) or 1 (married)

        Returns:
          cluster_id (int)
        """
        # Build input dict with provided and default features
        user_data = {
            "Age": float(Age),
            "Monthly_Income": float(Monthly_Income),
            "Gender": int(Gender),
            "weather": int(weather),
            "Marital_Status": int(Marital_Status),
        }
        # Add defaults for missing features
        for feat, val in DEFAULTS.items():
            user_data[feat] = val

        # Reorder into DataFrame
        df = pd.DataFrame([[user_data[f] for f in FEATURE_NAMES]],
                          columns=FEATURE_NAMES)

        # Predict cluster
        cluster = int(self.pipeline.predict(df)[0])
        return cluster
